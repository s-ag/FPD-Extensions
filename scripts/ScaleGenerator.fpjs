// Scale Generator



function get_text_engraving(dbl_value, decimal_places, textsize) {
    var t = new TextEngraving("", dbl_value.toFixed(decimal_places));
    t.SetAlignment(align_center);
    t.SetTextSize(textsize);
    return t;
}

function extend(obj, src) {
    for (var key in src) {
        if (src.hasOwnProperty(key)) obj[key] = src[key];
    }
    return obj;
}


function get_decimal_places(dbl_str_in) {
	
	var dot_idx = dbl_str_in.indexOf('.');
	if(dot_idx == -1)
		return 0;
	return dbl_str_in.length - dot_idx - 1;
}

// Needs a focussed frontpanel.
if (!HasFrontpanel())
    Error(_("Please create a frontpanel first."));

// Default settings
var settings = { 
	Shape : 0,
	Size: 30,
	SAngle: -10,
	EAngle: 190,
	Ticks: 10,
	SubTicks: 4,
	TickLen: 5,
	SubTickLen: 3,
	BaseLine: 1,
	TickLabel: 1,
	LabelDist: 3,
	TickStartValue: "1",
	TickIncrementValue: "1",
	TextSize: 4,
	RotateText: 0
};

// Check if selected object is scale
var sel = frontpanel.Selection();
var is_new = true;
var alt_x = 0, alt_y = 0;
if ( sel.length == 1 && (sel[0].IsGroup() || sel[0].IsHpglEngraving()) ) {
	var ei = sel[0].ExtInfo().split("|&#");
	alt_x = sel[0].X(); alt_y = sel[0].Y();
	if (ei.length == 2 && ei[0] == "ScaleGen") {
		settings = extend(settings, eval(ei[1]));
		is_new = false;
	}
}

// Dialog for settings
var dia = new Dialog(_("Scale Generator"));

var p_shape = new Param(settings["Shape"]);
var p_startangle = new Param(settings["SAngle"]);
var p_endangle = new Param(settings["EAngle"]);
var p_size = new Param(settings["Size"]);
var p_ticks = new Param(settings["Ticks"]);
var p_subticks = new Param(settings["SubTicks"]);
var p_ticklen = new Param(settings["TickLen"]);
var p_subticklen = new Param(settings["SubTickLen"]);
var p_baseline = new Param(settings["BaseLine"]);
var p_ticklabel = new Param(settings["TickLabel"]);
var p_labeldist = new Param(settings["LabelDist"]);
var p_tickstartvalue = new Param(settings["TickStartValue"]);
var p_tickincrementvalue = new Param(settings["TickIncrementValue"]);
var p_textsize = new Param(settings["TextSize"]);
var p_rotatetext = new Param(settings["RotateText"]);

if(typeof(p_tickstartvalue.get()) === 'number') {
	p_tickstartvalue = new Param(p_tickstartvalue.get().toString());
	p_tickincrementvalue = new Param(p_tickincrementvalue.get().toString());
}


dia.VSpacer(5).Newline().Spacer(10);
dia.Box().NewlineC();

if (is_new) {
	dia.Text(_("Create new scale:"));
} else {
	dia.Text(_("Edit selected scale:"));	
}


dia.VSpacer(5).NewlineC().Divider().VSpacer(10).NewlineC();

dia.RadioBox(p_shape, _("Shape of scale:\nRound\nLinear")).Spacer(25).NewlineC();

dia.VSpacer(10).BoxC().NewlineC();
dia.Text(_("Radius resp. Length:")).SpinValue(p_size, 0.1, 10000, 0.5).Spacer(3).Text(__("mm"));
dia.VSpacer(5).NewlineC();
dia.Text(_("Starting angle:")).SpinValue(p_startangle, -360.0, 360.0, 5.0).Spacer(3).Text(__("deg"));
dia.VSpacer(5).NewlineC();
dia.Text(_("End angle:")).SpinValue(p_endangle, -360.0, 360.0, 5.0).Spacer(3).Text(__("deg"));
dia.EndBox().NewlineC();


dia.VSpacer(5).NewlineC();
dia.BoxC().NewlineC();
dia.Text(_("Number of tick marks:")).SpinValue(p_ticks, 0, 10000, 1);
dia.VSpacer(5).NewlineC();
dia.Text(_("Number of sub tick marks:")).SpinValue(p_subticks, 0, 10000, 1);
dia.VSpacer(15).EndBox();


dia.BoxC().NewlineC();
dia.Spacer(8).Text(_("Length:"));
dia.SpinValue(p_ticklen, 0.1, 10000, 0.5).Spacer(3).Text(__("mm"));
dia.Spacer(12).VSpacer(5).NewlineC();
dia.Spacer(8).Text(_("Length:"));
dia.SpinValue(p_subticklen, 0.1, 10000, 0.5).Spacer(3).Text("mm");
dia.Spacer(12).VSpacer(15).EndBox().NewlineC();


dia.BoxC().NewlineC();
dia.CheckBox(p_baseline, _("Plot Baseline"))
dia.VSpacer(15).EndBox().NewlineC();

dia.Divider().NewlineC();

dia.BoxC().VSpacer(15).NewlineC();
dia.CheckBox(p_ticklabel, _("Add labeling:"));
dia.VSpacer(10).EndBox().NewlineC();

dia.BoxC().NewlineC().Text(_("Initial value:"));
//var tickstartvaluestr = new Param((parseFloat(p_tickstartvalue.get())).toFixed(get_decimal_places(p_tickstartvalue.get())));
dia.TextEntry(1, p_tickstartvalue);
dia.Spacer(8).Text(_("Increment:"));
//var tickincrementvaluestr = new Param((parseFloat(p_tickincrementvalue.get())).toFixed(get_decimal_places(p_tickincrementvalue.get())));
dia.TextEntry(1, p_tickincrementvalue);
dia.EndBox().NewlineC();


dia.BoxC().VSpacer(5).NewlineC().Text(_("Label spacing:"));
dia.SpinValue(p_labeldist, 0.1, 10000, 0.5).Spacer(3).Text("mm");
dia.VSpacer(5).NewlineC();
dia.Text(_("Text size:")).SpinValue(p_textsize, 0.1, 10000, 0.5)
dia.Spacer(3).Text(_("mm"));
dia.VSpacer(5).NewlineC();
dia.CheckBox(p_rotatetext, _("Rotate text (with round scales)"));
dia.VSpacer(10).NewlineC();
dia.VSpacer(10).EndBox();

dia.NewlineC();
dia.Divider().NewlineC();

dia.BoxC().VSpacer(10).NewlineC();
if(is_new) {
	dia.Text(_("To change the scale properties afterwards, \nhighlight the scale and click on the 'Create scale' button again in the toolbar."));
	dia.NewlineC().VSpacer(5).NewlineC();
}
dia.Text(_("Find out more in the online help:"));
dia.NewlineC();
dia.Text(_("https://www.schaeffer-ag.de/fpd-doc/en/fpd_Elements_Engraving_Scale.htm"));
dia.NewlineC().VSpacer(10);
dia.EndBox().Newline().VSpacer(10);


dia.BoxC().VSpacer(10).NewlineC();
dia.Spacer(0).DlgButton(0, _("Cancel")).Spacer(5).DlgButton(1, _("Ok")).Spacer(0);
dia.EndBox().Spacer(10).VSpacer(10);



if (1 == dia.Show()) {	// "Ok" button pressed
	var shape = p_shape.get();
	var size = p_size.get();
	var startangle = p_startangle.get();
	var endangle = p_endangle.get();
	var numticks = p_ticks.get();
	var numsubticks = p_subticks.get();
	var size = p_size.get();
	var ticklen = p_ticklen.get();
	var subticklen = p_subticklen.get();
	var baseline = p_baseline.get();
	var ticklabel = p_ticklabel.get();
	var labeldist = p_labeldist.get();
	var tickstartnormed = p_tickstartvalue.get().replace(',', '.');
	var tickstartvalue = parseFloat(tickstartnormed);
	var tickincrementnormed = p_tickincrementvalue.get().replace(',', '.');
	var tickincrementvalue = parseFloat(tickincrementnormed);
	var decimal_places = Math.max(get_decimal_places(tickstartnormed), get_decimal_places(tickincrementnormed));
	var textsize = p_textsize.get();
	var rotatetext = p_rotatetext.get();
	
	var angle = endangle - startangle;
	// in this case we do not draw the last line and label
	var fullCircle = false;

	if(shape == 0) {
		if (angle > 360 || angle < -360) {
			Error("Angle exceeds 360 degrees.");
		}
		if(angle == 360 || angle == -360) {
			fullCircle = true;
		}
	}
		
	if (ticklabel) {
		var g = new Group("scale");
	}

	var hpgl = new HpglEngraving("hpgl-canvas1", "", hpgl_center, 100, 0, 0);
	hpgl.SetRefPoint(hpgl_file);
	frontpanel.AddElement(hpgl, 0, 0);
	var pen_tick =  0;
	if (numsubticks > 0) var pen_subtick = hpgl.DefinePen(engrave_jet_black, engraver_0_2mm);
	var pen_base = hpgl.DefinePen(engrave_jet_black, engraver_0_2mm);
	if (shape == 0) {

		
		// Round scale
		var phi = (endangle - startangle) * Math.PI / 180;
		var sub_phi = phi / (numticks - 1);
		var start_phi = startangle * Math.PI / 180;

		var x_start, y_start;
		var akt_phi;
		for (i = 0; i < numticks; ++i) {
			akt_phi = start_phi + (phi * i / (numticks - 1));
			
			var x_n = -Math.cos(akt_phi);
			var y_n = Math.sin(akt_phi);
			var x = x_n * size; var y = y_n * size;
			if (i == 0) {
				x_start = x; y_start = y;
			}
			hpgl.ChangePen(pen_tick);
			hpgl.Start(x, y);
			hpgl.LineTo(x_n * (size + ticklen), y_n * (size + ticklen));
			hpgl.Finish();
			if (ticklabel && !(fullCircle && i == numticks - 1)) {
				var t = get_text_engraving(tickstartvalue + i * tickincrementvalue, decimal_places, textsize);
	
				if(rotatetext){
					t.Rotate(90 - akt_phi * 180 / Math.PI);
				}
				frontpanel.AddElement(t, x_n * (size + ticklen + labeldist), y_n * (size + ticklen + labeldist));
				g.AddElement(t);
			}
			if ( i < (numticks - 1) ) {
				var akt_sphi;
				for (j = 0; j < numsubticks; j++) {
					akt_sphi = akt_phi + sub_phi * (j + 1) / (numsubticks + 1);
					var sx_n = -Math.cos(akt_sphi);
					var sy_n = Math.sin(akt_sphi);
					hpgl.ChangePen(pen_subtick);
					hpgl.Start(sx_n * size, sy_n * size);
					hpgl.LineTo(sx_n * (size + subticklen), sy_n * (size + subticklen));
					hpgl.Finish();
				}
			}
		}
	} else {
		// Linear scale
		x_start = y_start = 0;
		var x;
		for (i = 0; i < numticks; ++i) {
			x = i * size / (numticks - 1);
			
			hpgl.ChangePen(pen_tick);
			hpgl.Start(x, 0);
			hpgl.LineTo(x, ticklen);
			hpgl.Finish();
			if (ticklabel) {
				var t = get_text_engraving(tickstartvalue + i * tickincrementvalue, decimal_places, textsize);
				frontpanel.AddElement(t, x, ticklen + labeldist);
				g.AddElement(t);
			}
			if ( i < (numticks - 1) ) {
				for (j = 0; j < numsubticks; j++) {
					sx = size * (i + (j + 1) / (numsubticks + 1)) / (numticks - 1);
					hpgl.ChangePen(pen_subtick);
					hpgl.Start(sx, 0);
					hpgl.LineTo(sx, subticklen);
					hpgl.Finish();
				}
			}
		}
		
	}
	if (baseline) {
		hpgl.ChangePen(pen_base);
		hpgl.Start(x_start, y_start);
		if (shape == 0) {
			if(fullCircle) {
				hpgl.ArcToMP(-x, -y, 0, 0, (startangle > endangle) ? 1 : 0);
				hpgl.ArcToMP(x, y, 0, 0, (startangle > endangle) ? 1 : 0);
			}
			else {
				hpgl.ArcToMP(x, y, 0, 0, (startangle > endangle) ? 1 : 0);
			}
		} else {
			hpgl.LineTo(size, 0);
		}			
		hpgl.Finish();
	}
	var element = hpgl;
	if (ticklabel) {
		g.AddElement(hpgl);
		g.SetRefElement(hpgl);
		frontpanel.AddElement(g, 0, 0);
		element = g;
	}
	
	// Save settings to ExtInfo
	settings["Shape"] = shape;
	settings["SAngle"] = startangle;
	settings["EAngle"] = endangle;
	settings["Size"] = size;
	settings["Ticks"] = numticks;
	settings["SubTicks"] = numsubticks;
	settings["TickLen"] = ticklen;
	settings["SubTickLen"] = subticklen;
	settings["BaseLine"] = baseline;
	settings["TickLabel"] = ticklabel;
	settings["LabelDist"] = labeldist;
	settings["TickStartValue"] = tickstartvalue.toFixed(decimal_places);
	settings["TickIncrementValue"] = tickincrementvalue.toFixed(decimal_places);
	settings["TextSize"] = textsize;
	settings["RotateText"] = rotatetext; 
	element.SetExtInfo("ScaleGen|&#" + settings.toSource());
	if ( !is_new ) {
		frontpanel.RemoveElement(sel[0]);
	}
	element.MoveTo(alt_x, alt_y);
	frontpanel.SelectElement(element);
}
